//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код был сгенерирован автоматически с помощью com.unity.inputsystem:InputActionCodeGenerator
//     версия 1.7.0
//     из Assets/PlayerInputMap.inputactions
//
//     Изменения в этом файле могут вызвать неправильное поведение и будут потеряны, если
//     код будет сгенерирован заново.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputMap : IInputActionCollection2, IDisposable
{
    // Свойство для доступа к активу ввода
    public InputActionAsset asset { get; }

    // Конструктор класса
    public @PlayerInputMap()
    {
        // Загружаем актив ввода из JSON
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputMap"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""52d76e28-20b8-45d5-a5ed-07fef7280a92"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5bf63700-9871-4a30-ab73-6450ccbd840c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""16cb45d7-383a-4759-9e41-4d1108a8e68b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""cca2a0e7-2a2d-44bb-a875-69c670a9a415"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09619935-ee48-4563-8fb9-2ea8bce9c7e2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""UI"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b36948ee-0910-440d-9b82-fcd6f1b3dd82"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abedd6bd-7d37-474c-96b0-b39a548f8404"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fc4e58d-127c-42d9-8efd-115383a89a71"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efc998eb-92f3-477c-a2b9-820f44db0abb"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""bindingGroup"": ""UI"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Инициализация карты действий игрока
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Click = m_Player.FindAction("Click", throwIfNotFound: true);
        m_Player_Position = m_Player.FindAction("Position", throwIfNotFound: true);
    }

    // Освобождение ресурсов
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    // Маска привязки для управления
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    // Устройства ввода
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    // Схемы управления
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    // Проверка наличия действия
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    // Перечисление действий
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    // Включение всех действий
    public void Enable()
    {
        asset.Enable();
    }

    // Отключение всех действий
    public void Disable()
    {
        asset.Disable();
    }

    // Привязки действий
    public IEnumerable<InputBinding> bindings => asset.bindings;

    // Поиск действия по имени или ID
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    // Игрок
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Click;
    private readonly InputAction m_Player_Position;

    // Структура для действий игрока
    public struct PlayerActions
    {
        private @PlayerInputMap m_Wrapper;
        public PlayerActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move; // Действие перемещения
        public InputAction @Click => m_Wrapper.m_Player_Click; // Действие клика
        public InputAction @Position => m_Wrapper.m_Player_Position; // Действие позиции
        public InputActionMap Get() { return m_Wrapper.m_Player; } // Получение карты действий
        public void Enable() { Get().Enable(); } // Включение карты действий
        public void Disable() { Get().Disable(); } // Отключение карты действий
        public bool enabled => Get().enabled; // Проверка, включена ли карта действий
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); } // Неявное преобразование в карту действий

        // Добавление обратных вызовов для действий игрока
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove; // Обратный вызов для начала перемещения
            @Move.performed += instance.OnMove; // Обратный вызов для выполнения перемещения
            @Move.canceled += instance.OnMove; // Обратный вызов для отмены перемещения
            @Click.started += instance.OnClick; // Обратный вызов для начала клика
            @Click.performed += instance.OnClick; // Обратный вызов для выполнения клика
            @Click.canceled += instance.OnClick; // Обратный вызов для отмены клика
            @Position.started += instance.OnPosition; // Обратный вызов для начала изменения позиции
            @Position.performed += instance.OnPosition; // Обратный вызов для выполнения изменения позиции
            @Position.canceled += instance.OnPosition; // Обратный вызов для отмены изменения позиции
        }

        // Удаление обратных вызовов
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        // Удаление обратных вызовов для конкретного экземпляра
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        // Установка обратных вызовов для действий игрока
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }

    // Свойство для доступа к действиям игрока
    public PlayerActions @Player => new PlayerActions(this);

    // Индекс схемы управления клавиатурой
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }

    // Индекс схемы управления UI
    private int m_UISchemeIndex = -1;
    public InputControlScheme UIScheme
    {
        get
        {
            if (m_UISchemeIndex == -1) m_UISchemeIndex = asset.FindControlSchemeIndex("UI");
            return asset.controlSchemes[m_UISchemeIndex];
        }
    }

    // Интерфейс для действий игрока
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context); // Метод для обработки перемещения
        void OnClick(InputAction.CallbackContext context); // Метод для обработки клика
        void OnPosition(InputAction.CallbackContext context); //
